[
	{
		"type":"var",
		"name":"_G",
		"description":"A global variable (not a function) that holds the global environment (see <a href='https://www.lua.org/manual/5.2/manual.html#2.2'>§2.2</a>). Lua itself does not use this variable; changing its value does not affect any environment, nor vice-versa."
		"return_type":null,
		"defined_in":null
	},
	{
		"type":"var",
		"name":"_VERSION",
		"description":"A global variable (not a function) that holds a string containing the current interpreter version. The current contents of this variable is \"<code>Lua 5.2</code>\"."
		"return_type":null,
		"defined_in":null
	}
	{
		"type":"function",
		"name":"assert",
		"summary":"Issues an error when the value of its argument v is false (i.e., <b>nil</b> or <b>false</b>); otherwise, returns all its arguments. message is an error message; when absent, it defaults to \"assertion failed!\"",
		"return_type":null,
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":null,
					"name":"v",
					"description":null
				}
			],
			[
				{
					"type":null,
					"name":"v",
					"description":null
				},
				{
					"type":"string",
					"name":"message",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"collectgarbage",
		"summary":"This function is a generic interface to the garbage collector. It performs different functions according to its first argument, <code>opt</code>:<ul><li><b><code>\"collect\":</code></b> performs a full garbage-collection cycle. This is the default option.</li><li><b><code>\"stop\":</code></b> stops automatic execution of the garbage collector. The collector will run only when explicitly invoked, until a call to restart it.</li><li><b><code>\"restart\":</code></b> restarts automatic execution of the garbage collector.</li><li><b><code>\"count\":</code></b> returns the total memory in use by Lua (in Kbytes) and a second value with the total memory in bytes modulo 1024. The first value has a fractional part, so the following equality is always true:<code><pre>k, b = collectgarbage(\"count\")\nassert(k*1024 == math.floor(k)*1024 + b)</pre></code>(The second result is useful when Lua is compiled with a non floating-point type for numbers.)</li><li><b><code>\"step\":</code></b> performs a garbage-collection step. The step \"size\" is controlled by <code>arg</code> (larger values mean more steps) in a non-specified way. If you want to control the step size you must experimentally tune the value of <code>arg</code>. Returns <b>true</b> if the step finished a collection cycle.</li><li><b><code>\"setpause\":</code></b>sets <code>arg</code> as the new value for the <i>pause</i> of the collector (see <a href='https://www.lua.org/manual/5.2/manual.html#2.5'>§2.5</a>). Returns the previous value for <i>pause</i>.</li><li><b><code>\"setstepmul\":</code></b>sets <code>arg</code> as the new value for the step <i>multiplier</i> of the collector (see <a href='https://www.lua.org/manual/5.2/manual.html#2.5'>§2.5</a>). Returns the previous value for <i>step</i>.</li><li><b><code>\"isrunning\":</code></b>returns a boolean that tells whether the collector is running (i.e., not stopped).</li><li><b><code>\"generational\":</code></b>changes the collector to generational mode. This is an experimental feature (see <a href='https://www.lua.org/manual/5.2/manual.html#2.5'>§2.5</a>).</li><li><b><code>\"incremental\":</code></b>changes the collector to incremental mode. This is the default mode.</li></ul>",
		"return_type":"dynamic",
		"return_value_description":"Depends on the <code>opt</code> parameter.",
		"defined_in":null,
		"heads": [
			[],
			[
				{
					"type":"string",
					"name":"opt",
					"description":null
				}
			],
			[
				{
					"type":"string",
					"name":"opt",
					"description":null
				},
				{
					"type":"number",
					"name":"arg",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"dofile",
		"summary":"Opens the named file and executes its contents as a Lua chunk. When called without arguments, <code>dofile</code> executes the contents of the standard input (<code>stdin</code>). Returns all values returned by the chunk. In case of errors, <code>dofile</code> propagates the error to its caller (that is, <code>dofile</code> does not run in protected mode).",
		"return_type":"dynamic",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[],
			[
				{
					"type":"string",
					"name":"filename",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"error",
		"summary":"Terminates the last protected function called and returns message as the error message. Function <code>error</code> never returns.<br><br>Usually, <code>error</code> adds some information about the error position at the beginning of the message, if the message is a string. The <code>level</code> argument specifies how to get the error position. With level 1 (the default), the error position is where the <code>error</code> function was called. Level 2 points the error to where the function that called <code>error</code> was called; and so on. Passing a level 0 avoids the addition of error position information to the message.",
		"return_type":null,
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":"string",
					"name":"message",
					"description":null
				}
			],
			[
				{
					"type":"string",
					"name":"message",
					"description":null
				},
				{
					"type":"uint",
					"name":"level",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"getmetatable",
		"summary":"If object does not have a metatable, returns <b>nil</b>. Otherwise, if the object's metatable has a <code>\"__metatable\"</code> field, returns the associated value. Otherwise, returns the metatable of the given object.",
		"return_type":"table",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":"dynamic",
					"name":"object",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"ipairs",
		"summary":"If <code>t</code> has a metamethod <code>__ipairs</code>, calls it with <code>t</code> as argument and returns the first three results from the call.<br><br>Otherwise, returns three values: an iterator function, the table <code>t</code>, and 0, so that the construction<code><pre>for i,v in ipairs(t) do <i>body</i> end</pre></code>will iterate over the pairs (<code>1,t[1]</code>), (<code>2,t[2]</code>), ..., up to the first integer key absent from the table.",
		"return_type":"table",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":"table",
					"name":"t",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"load",
		"summary":"Loads a chunk.<br><br>If <code>ld</code> is a string, the chunk is this string. If <code>ld</code> is a function, <code>load</code> calls it repeatedly to get the chunk pieces. Each call to <code>ld</code> must return a string that concatenates with previous results. A return of an empty string, <b>nil</b>, or no value signals the end of the chunk.<br><br>If there are no syntactic errors, returns the compiled chunk as a function; otherwise, returns <b>nil</b> plus the error message.<br><br>If the resulting function has upvalues, the first upvalue is set to the value of <code>env</code>, if that parameter is given, or to the value of the global environment. (When you load a main chunk, the resulting function will always have exactly one upvalue, the <code>_ENV</codE> variable (see <a href='https://www.lua.org/manual/5.2/manual.html#2.2'>§2.2</a>). When you load a binary chunk created from a function (see <a href='https://www.lua.org/manual/5.2/manual.html#pdf-string.dump'>string.dump</a>), the resulting function can have arbitrary upvalues.)<br><br><code>source</code> is used as the source of the chunk for error messages and debug information (see <a href='https://www.lua.org/manual/5.2/manual.html#4.9'>§4.9</a>). When absent, it defaults to ld, if <code>ld</code> is a string, or to \"<code>=(load)</code>\" otherwise.<br><br>The string <code>mode</code> controls whether the chunk can be text or binary (that is, a precompiled chunk). It may be the string \"<code>b</code>\" (only binary chunks), \"<code>t</code>\" (only text chunks), or \"<code>bt</code>\" (both binary and text). The default is \"<code>bt</code>\".",
		"return_type":"dynamic",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":"dynamic",
					"name":"ld",
					"description":null
				}
			],
			[
				{
					"type":"dynamic",
					"name":"ld",
					"description":null
				},
				{
					"type":"string",
					"name":"source",
					"description":null
				}
			],
			[
				{
					"type":"dynamic",
					"name":"ld",
					"description":null
				},
				{
					"type":"string",
					"name":"source",
					"description":null
				},
				{
					"type":"string",
					"name":"mode",
					"description":null
				}
			],
			[
				{
					"type":"dynamic",
					"name":"ld",
					"description":null
				},
				{
					"type":"string",
					"name":"source",
					"description":null
				},
				{
					"type":"string",
					"name":"mode",
					"description":null
				},
				{
					"type":"dynamic",
					"name":"env",
					"description":null
				}
			],
		]
	},
	{
		"type":"function",
		"name":"loadfile",
		"summary":"Similar to <code>load</code>, but gets the chunk from file <code>filename</code> or from the standard input, if no file name is given.",
		"return_type":"dynamic",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[],
			[
				{
					"type":"string",
					"name":"filename",
					"description":null
				}
			],
			[
				{
					"type":"string",
					"name":"filename",
					"description":null
				},
				{
					"type":"string",
					"name":"mode",
					"description":null
				}
			],
			[
				{
					"type":"string",
					"name":"filename",
					"description":null
				},
				{
					"type":"string",
					"name":"mode",
					"description":null
				},
				{
					"type":"dynamic",
					"name":"env",
					"description":null
				}
			],
		]
	},
	{
		"type":"function",
		"name":"next",
		"summary":"Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. <code>next</code> returns the next index of the table and its associated value. When called with <b>nil</b> as its second argument, <code>next</code> returns an initial index and its associated value. When called with the last index, or with <b>nil</b> in an empty table, <code>next</code> returns <b>nil</b>. If the second argument is absent, then it is interpreted as <b>nil</b>. In particular, you can use <code>next(t)</code> to check whether a table is empty.<br><br>The order in which the indices are enumerated is not specified, <i>even for numeric indices</i>. (To traverse a table in numeric order, use a numerical <b>for</b>.)<br><br>The behavior of <code>next</code> is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may clear existing fields.",
		"return_type":"dynamic",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":"table",
					"name":"table",
					"description":null
				}
			],
			[
				{
					"type":"table",
					"name":"table",
					"description":null
				},
				{
					"type":"dynamic",
					"name":"index",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"pairs",
		"summary":"",
		"return_type":"table",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[]
		]
	},
	{
		"type":"function",
		"name":"pcall",
		"summary":"",
		"return_type":"table",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[]
		]
	},
	{
		"type":"function",
		"name":"print",
		"summary":"",
		"return_type":null,
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[]
		]
	},
	{
		"type":"function",
		"name":"rawequal",
		"summary":"Checks whether <code>v1</code> is equal to <code>v2</code>, without invoking any metamethod. Returns a boolean.",
		"return_type":"boolean",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":"dynamic",
					"name":"v1",
					"description":null
				},
				{
					"type":"dynamic",
					"name":"v2",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"rawget",
		"summary":"Gets the real value of <code>table[index]</code>, without invoking any metamethod. <code>table</code> must be a table; <code>index</code> may be any value.",
		"return_type":"dynamic",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":"table",
					"name":"table",
					"description":null
				},
				{
					"type":"dynamic",
					"name":"index",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"rawlen",
		"summary":"Returns the length of the object <code>v</code>, which must be a table or a string, without invoking any metamethod. Returns an integer number.",
		"return_type":"int",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":"dynamic",
					"name":"v",
					"description":null
				}
			]
		]
	},
	{
		"type":"function",
		"name":"rawset",
		"summary":"",
		"return_type":null,
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[]
		]
	},
	{
		"type":"function",
		"name":"select",
		"summary":"",
		"return_type":null,
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[]
		]
	},
	{
		"type":"function",
		"name":"setmetatable",
		"summary":"",
		"return_type":null,
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[]
		]
	},
	{
		"type":"function",
		"name":"tonumber",
		"summary":"",
		"return_type":null,
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[]
		]
	},
	{
		"type":"function",
		"name":"tostring",
		"summary":"",
		"return_type":null,
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[]
		]
	},
	{
		"type":"function",
		"name":"type",
		"summary":"",
		"return_type":null,
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[]
		]
	},
	{
		"type":"function",
		"name":"xpcall",
		"summary":"This function is similar to <code>pcall</code>, except that it sets a new message handler <code>msgh</code>.",
		"return_type":"table",
		"return_value_description":null,
		"defined_in":null,
		"heads": [
			[
				{
					"type":"function",
					"name":"f",
					"description":null
				},
				{
					"type":"dynamic",
					"name":"msgh",
					"description":null
				}
			],
			[
				{
					"type":"function",
					"name":"f",
					"description":null
				},
				{
					"type":"dynamic",
					"name":"msgh",
					"description":null
				},
				{
					"type":"dynamic",
					"name":"...",
					"description":null
				}
			]
		]
	},
	{
		"type":"shorthand",
		"input_text":"for",
		"replacement_text":"for i = 0, 10, +1 do\n\t\nend",
		"short_description":null,
		"summary":"<code><pre>for i = 0, 10, +1 do\n\t\nend</pre></code>"
	},
	{
		"type":"shorthand",
		"input_text":"while",
		"replacement_text":"while false do\n\t\nend",
		"short_description":null,
		"summary":"<code><pre>for i = 0, 10, +1 do\n\t\nend</pre></code>"
	},
	{
		"type":"shorthand",
		"input_text":"repeat",
		"replacement_text":"repeat\n\t\nuntil(false)",
		"short_description":null,
		"summary":"<code><pre>for i = 0, 10, +1 do\n\t\nend</pre></code>"
	}
]