/* The following code was generated by JFlex 1.4.1 on 10.02.17 18:44 */

/*
 * 02/05/2012
 *
 * JavaScriptTokenMaker.java - Parses a document into JavaScript tokens.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package de.ralleytn.fmcs.editor.tokenmaker;

import java.io.*;
import javax.swing.text.Segment;
import java.util.Stack;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for JavaScript files.  Its states could be simplified, but are
 * kept the way they are to keep a degree of similarity (i.e. copy/paste)
 * between it and HTML/JSP/PHPTokenMaker.  This should cause no difference in
 * performance.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>JavaScriptTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.9
 */

public class TokenMakerJavaScriptFMCS extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int JS_STRING = 1;
  public static final int E4X = 6;
  public static final int E4X_INTAG = 10;
  public static final int E4X_PI = 8;
  public static final int JS_MLC = 3;
  public static final int JS_CHAR = 2;
  public static final int JS_EOL_COMMENT = 5;
  public static final int E4X_COMMENT = 7;
  public static final int JS_DOCCOMMENT = 4;
  public static final int E4X_DTD = 9;
  public static final int JS_TEMPLATE_LITERAL = 14;
  public static final int E4X_INATTR_SINGLE = 12;
  public static final int E4X_INATTR_DOUBLE = 11;
  public static final int JS_TEMPLATE_LITERAL_EXPR = 15;
  public static final int YYINITIAL = 0;
  public static final int E4X_CDATA = 13;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\75\1\2\1\0\1\1\1\11\22\0\1\75\1\36\1\77"+
    "\1\12\1\15\1\35\1\40\1\107\2\106\1\17\1\30\1\27\1\24"+
    "\1\25\1\16\1\5\7\7\2\4\1\41\1\76\1\31\1\32\1\34"+
    "\1\37\1\45\1\103\1\6\1\101\1\102\1\23\1\22\1\110\1\3"+
    "\1\114\2\3\1\21\1\3\1\116\1\115\2\3\1\112\1\113\1\104"+
    "\1\3\1\111\1\3\1\20\2\3\1\100\1\13\1\105\1\33\1\14"+
    "\1\117\1\46\1\47\1\53\1\65\1\54\1\70\1\57\1\61\1\56"+
    "\1\3\1\64\1\55\1\44\1\60\1\62\1\66\1\73\1\52\1\50"+
    "\1\51\1\10\1\71\1\63\1\72\1\67\1\3\1\74\1\43\1\26"+
    "\1\42\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\2\1\3\0\1\2\1\3\1\4\1\5\2\6"+
    "\1\2\1\5\3\7\1\5\1\10\1\5\6\7\1\2"+
    "\21\5\1\11\1\12\1\13\1\1\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\1\1\22\5\1\1\23"+
    "\10\1\1\24\3\1\2\5\1\25\1\26\1\27\1\30"+
    "\1\1\1\31\5\1\1\32\2\1\1\33\1\1\1\34"+
    "\1\35\1\36\2\37\1\40\1\41\1\42\1\43\1\1"+
    "\1\44\4\1\1\45\1\46\1\47\1\50\1\1\1\51"+
    "\1\1\1\52\1\2\1\53\1\6\1\54\1\53\1\54"+
    "\1\53\1\55\1\53\1\56\1\5\2\0\1\57\1\60"+
    "\2\7\2\0\1\61\1\7\15\5\1\62\6\5\1\62"+
    "\7\5\1\63\1\64\1\65\1\66\4\0\1\67\2\0"+
    "\1\70\32\0\1\71\1\26\1\72\1\73\1\27\5\0"+
    "\1\74\2\0\1\75\1\76\1\2\1\54\1\0\2\55"+
    "\1\5\1\77\1\100\33\5\64\0\1\101\2\0\1\102"+
    "\5\0\1\103\1\2\1\5\1\104\4\5\1\105\12\5"+
    "\1\56\4\5\1\0\1\1\1\0\1\106\15\0\1\107"+
    "\45\0\1\110\4\0\1\111\1\0\1\112\2\0\1\113"+
    "\1\0\1\114\1\2\13\5\15\0\1\107\20\0\1\107"+
    "\20\0\1\2\5\5\1\115\3\5\33\0\5\5\1\107"+
    "\4\0\1\107\12\0\2\5\6\0\2\5\2\0\1\116"+
    "\1\5\1\0\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[550];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u05a0\0\u06e0"+
    "\0\u0730\0\u0780\0\u07d0\0\u0820\0\u05a0\0\u05a0\0\u0870\0\u08c0"+
    "\0\u0910\0\u0960\0\u05a0\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\u0af0"+
    "\0\u0b40\0\u0b90\0\u0be0\0\u0c30\0\u0c80\0\u0cd0\0\u0d20\0\u0d70"+
    "\0\u0dc0\0\u0e10\0\u0e60\0\u0eb0\0\u0f00\0\u0f50\0\u05a0\0\u05a0"+
    "\0\u05a0\0\u0fa0\0\u05a0\0\u0ff0\0\u05a0\0\u1040\0\u05a0\0\u0ff0"+
    "\0\u05a0\0\u1090\0\u05a0\0\u10e0\0\u1130\0\u1180\0\u11d0\0\u1220"+
    "\0\u05a0\0\u1270\0\u12c0\0\u1310\0\u1360\0\u13b0\0\u1400\0\u1450"+
    "\0\u14a0\0\u05a0\0\u14f0\0\u1540\0\u1590\0\u15e0\0\u1630\0\u05a0"+
    "\0\u1680\0\u16d0\0\u05a0\0\u1720\0\u05a0\0\u1770\0\u17c0\0\u1810"+
    "\0\u1860\0\u18b0\0\u05a0\0\u1900\0\u1950\0\u05a0\0\u19a0\0\u05a0"+
    "\0\u05a0\0\u05a0\0\u19f0\0\u1a40\0\u1a90\0\u05a0\0\u05a0\0\u05a0"+
    "\0\u1ae0\0\u05a0\0\u1b30\0\u1b80\0\u1bd0\0\u1c20\0\u05a0\0\u0ff0"+
    "\0\u1c70\0\u05a0\0\u1cc0\0\u05a0\0\u1d10\0\u05a0\0\u1d60\0\u1db0"+
    "\0\u1db0\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0\0\u1f40\0\u05f0"+
    "\0\u1f90\0\u1fe0\0\u2030\0\u05a0\0\u2080\0\u1fe0\0\u20d0\0\u0780"+
    "\0\u20d0\0\u05a0\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260\0\u22b0"+
    "\0\u2300\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0\0\u2530"+
    "\0\u05f0\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u2710\0\u2760"+
    "\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940\0\u2990\0\u05a0"+
    "\0\u29e0\0\u2a30\0\u05a0\0\u2a80\0\u2ad0\0\u2b20\0\u2b70\0\u05a0"+
    "\0\u2bc0\0\u2c10\0\u05a0\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0"+
    "\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0\0\u3020"+
    "\0\u3070\0\u30c0\0\u3110\0\u3160\0\u31b0\0\u3200\0\u3250\0\u32a0"+
    "\0\u32f0\0\u3340\0\u3390\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u3520"+
    "\0\u05a0\0\u05a0\0\u3570\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u05a0"+
    "\0\u3700\0\u3750\0\u05a0\0\u05a0\0\u37a0\0\u37f0\0\u3840\0\u1db0"+
    "\0\u3890\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u3a70\0\u3ac0"+
    "\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0\0\u3cf0\0\u3d40"+
    "\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u3f20\0\u3f70\0\u3fc0"+
    "\0\u4010\0\u4060\0\u40b0\0\u4100\0\u4150\0\u41a0\0\u41f0\0\u4240"+
    "\0\u4290\0\u42e0\0\u4330\0\u4380\0\u43d0\0\u4420\0\u4470\0\u44c0"+
    "\0\u4510\0\u4560\0\u45b0\0\u4600\0\u4650\0\u46a0\0\u46f0\0\u4740"+
    "\0\u4790\0\u47e0\0\u4830\0\u4880\0\u48d0\0\u4920\0\u4970\0\u49c0"+
    "\0\u4a10\0\u4a60\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0\0\u4bf0\0\u4c40"+
    "\0\u4c90\0\u4ce0\0\u4d30\0\u4d80\0\u4dd0\0\u4e20\0\u4e70\0\u4ec0"+
    "\0\u4f10\0\u4f60\0\u4fb0\0\u5000\0\u5050\0\u50a0\0\u50f0\0\u5140"+
    "\0\u5190\0\u51e0\0\u5230\0\u5280\0\u52d0\0\u5320\0\u05a0\0\u5370"+
    "\0\u53c0\0\u5410\0\u5460\0\u54b0\0\u05a0\0\u5500\0\u5550\0\u05a0"+
    "\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u05f0\0\u56e0\0\u5730\0\u5780"+
    "\0\u57d0\0\u5820\0\u5870\0\u58c0\0\u5910\0\u5960\0\u59b0\0\u2760"+
    "\0\u5a00\0\u5a50\0\u5aa0\0\u5af0\0\u2a30\0\u05a0\0\u5b40\0\u5b90"+
    "\0\u5be0\0\u5c30\0\u5c80\0\u5cd0\0\u5d20\0\u5d70\0\u5dc0\0\u5e10"+
    "\0\u5e60\0\u5eb0\0\u5f00\0\u5f50\0\u5fa0\0\u05a0\0\u5ff0\0\u6040"+
    "\0\u6090\0\u60e0\0\u6130\0\u6180\0\u61d0\0\u6220\0\u6270\0\u62c0"+
    "\0\u6310\0\u6360\0\u63b0\0\u6400\0\u6450\0\u64a0\0\u64f0\0\u6540"+
    "\0\u6590\0\u65e0\0\u6630\0\u6680\0\u66d0\0\u6720\0\u6770\0\u67c0"+
    "\0\u6810\0\u6860\0\u68b0\0\u6900\0\u6950\0\u69a0\0\u69f0\0\u6a40"+
    "\0\u6a90\0\u6ae0\0\u6b30\0\u6b80\0\u6bd0\0\u6c20\0\u6c70\0\u6cc0"+
    "\0\u6d10\0\u6d60\0\u05a0\0\u6db0\0\u6e00\0\u6e50\0\u6ea0\0\u05a0"+
    "\0\u6ef0\0\u6f40\0\u6f90\0\u6fe0\0\u7030\0\u7080\0\u70d0\0\u7120"+
    "\0\u7170\0\u71c0\0\u7210\0\u7260\0\u5b90\0\u72b0\0\u7300\0\u7350"+
    "\0\u73a0\0\u73f0\0\u7440\0\u7490\0\u74e0\0\u7530\0\u7580\0\u75d0"+
    "\0\u7620\0\u7670\0\u76c0\0\u7710\0\u7760\0\u77b0\0\u7800\0\u7850"+
    "\0\u78a0\0\u78f0\0\u7940\0\u7990\0\u79e0\0\u7a30\0\u7a80\0\u7ad0"+
    "\0\u7b20\0\u7b70\0\u7bc0\0\u7c10\0\u7c60\0\u7cb0\0\u7d00\0\u7d50"+
    "\0\u7da0\0\u7df0\0\u6b80\0\u7e40\0\u7e90\0\u7ee0\0\u6d10\0\u7f30"+
    "\0\u7f80\0\u6e50\0\u7fd0\0\u8020\0\u8070\0\u80c0\0\u8110\0\u8160"+
    "\0\u81b0\0\u05f0\0\u8200\0\u8250\0\u82a0\0\u82f0\0\u8340\0\u8390"+
    "\0\u83e0\0\u8430\0\u8480\0\u84d0\0\u8520\0\u8570\0\u85c0\0\u8610"+
    "\0\u8660\0\u86b0\0\u8700\0\u8750\0\u87a0\0\u87f0\0\u8840\0\u8890"+
    "\0\u88e0\0\u8930\0\u8980\0\u89d0\0\u8a20\0\u8a70\0\u8ac0\0\u8b10"+
    "\0\u8b60\0\u8bb0\0\u8c00\0\u8c50\0\u8ca0\0\u8cf0\0\u8d40\0\u8d90"+
    "\0\u8de0\0\u8e30\0\u6090\0\u8e80\0\u8ed0\0\u8f20\0\u8f70\0\u8fc0"+
    "\0\u9010\0\u9060\0\u90b0\0\u9100\0\u9150\0\u91a0\0\u91f0\0\u9240"+
    "\0\u9290\0\u92e0\0\u9330\0\u9380\0\u93d0\0\u9420\0\u9470\0\u94c0"+
    "\0\u9510\0\u05a0\0\u9560\0\u95b0\0\u9600\0\u9650";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[550];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\24\1\25"+
    "\1\24\1\27\2\21\1\30\1\24\1\31\1\32\4\24"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\32"+
    "\1\42\2\32\1\43\1\44\2\43\1\45\1\24\1\21"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\2\24\1\61\1\24\1\62\1\63"+
    "\1\24\1\64\1\65\1\66\1\24\1\35\1\22\1\36"+
    "\1\67\1\35\4\24\2\35\1\70\7\24\1\71\2\72"+
    "\1\73\10\72\1\74\63\72\1\75\20\72\2\76\1\77"+
    "\10\76\1\100\73\76\1\101\10\76\2\102\1\103\14\102"+
    "\1\104\41\102\1\105\1\102\1\106\4\102\1\107\27\102"+
    "\2\110\1\111\14\110\1\112\11\110\1\113\13\110\1\114"+
    "\13\110\1\115\1\110\1\116\4\110\1\117\3\110\1\120"+
    "\23\110\2\121\1\122\56\121\1\123\1\121\1\124\4\121"+
    "\1\125\27\121\1\126\1\127\1\130\26\126\1\131\6\126"+
    "\1\132\34\126\1\22\1\133\21\126\2\134\1\135\21\134"+
    "\1\136\34\134\1\137\1\134\1\140\4\134\1\141\27\134"+
    "\2\142\1\143\34\142\1\144\60\142\2\145\1\146\26\145"+
    "\1\147\2\145\1\150\43\145\1\151\4\145\1\152\12\145"+
    "\1\153\1\154\1\0\13\153\1\155\13\153\1\43\1\153"+
    "\1\156\40\153\1\22\1\153\1\157\7\153\1\160\10\153"+
    "\77\161\1\162\20\161\107\163\1\162\10\163\105\164\1\165"+
    "\12\164\2\166\1\167\10\166\1\170\1\166\1\171\101\166"+
    "\1\172\2\173\1\174\12\173\1\175\10\173\1\176\71\173"+
    "\1\21\2\0\6\21\1\0\4\21\2\0\4\21\20\0"+
    "\30\21\5\0\4\21\3\0\7\21\2\0\1\22\73\0"+
    "\1\22\142\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\26\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\200\2\0\1\200\2\25"+
    "\1\200\1\25\1\200\1\0\4\200\2\0\1\200\1\201"+
    "\1\202\1\203\1\0\1\204\16\0\10\200\1\203\1\201"+
    "\7\200\1\202\2\200\1\202\3\200\5\0\1\200\1\202"+
    "\2\200\3\0\7\200\1\0\1\200\2\0\1\200\1\205"+
    "\1\206\1\200\1\206\1\200\1\0\4\200\2\0\1\207"+
    "\1\201\1\202\1\203\1\0\1\204\16\0\10\200\1\203"+
    "\1\201\7\200\1\202\2\200\1\202\1\200\1\207\1\200"+
    "\5\0\1\200\1\202\2\200\3\0\7\200\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\26\24\5\0\4\24\3\0\1\210"+
    "\1\211\5\24\1\0\13\212\1\213\2\212\1\214\1\215"+
    "\12\212\1\216\65\212\32\0\1\43\111\0\1\43\5\0"+
    "\1\43\71\0\2\204\1\0\1\204\140\0\1\43\1\0"+
    "\1\217\116\0\1\220\1\43\66\0\1\221\27\0\1\222"+
    "\1\43\42\0\1\221\54\0\1\43\1\0\1\223\115\0"+
    "\1\43\5\0\1\43\111\0\1\43\10\0\1\43\54\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\2\24\1\224\23\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\4\24\1\225\21\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\6\24\1\226\17\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\4\24\1\227\6\24\1\230\1\231\4\24\1\232\4\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\1\233\5\24\1\234\17\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\14\24\1\235"+
    "\11\24\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\4\24\1\236\2\24\1\237\16\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\14\24\1\240\11\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\12\24\1\241\5\24\1\242"+
    "\1\24\1\241\3\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\6\24\1\243\5\24\1\244"+
    "\11\24\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\5\24\1\245\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\6\24\1\246\17\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\13\24"+
    "\1\247\12\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\14\24\1\250\11\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\1\251"+
    "\3\24\1\252\1\253\20\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\5\24\1\254\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\1\255\13\24"+
    "\1\256\11\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\1\256\25\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\20\24\1\257"+
    "\5\24\5\0\4\24\3\0\7\24\1\0\2\72\1\0"+
    "\10\72\1\0\63\72\1\0\20\72\2\260\1\0\5\260"+
    "\1\261\61\260\1\262\25\260\2\76\1\0\10\76\1\0"+
    "\73\76\1\0\10\76\2\102\1\0\14\102\1\0\41\102"+
    "\1\0\1\102\1\0\4\102\1\0\27\102\16\0\1\263"+
    "\152\0\1\264\131\0\1\265\105\0\1\266\4\0\1\267"+
    "\41\0\2\110\1\0\14\110\1\0\11\110\1\0\13\110"+
    "\1\0\13\110\1\0\1\110\1\0\4\110\1\0\3\110"+
    "\1\0\23\110\16\0\1\270\104\0\1\271\2\0\1\271"+
    "\1\0\1\271\5\0\1\272\1\0\4\271\10\0\1\273"+
    "\7\0\1\271\1\0\26\271\5\0\4\271\3\0\7\271"+
    "\45\0\1\274\1\0\1\275\1\276\1\277\1\300\1\301"+
    "\1\302\1\303\1\304\1\305\1\306\1\307\3\0\1\310"+
    "\1\311\1\312\1\0\1\313\1\314\77\0\1\315\131\0"+
    "\1\316\105\0\1\317\4\0\1\320\106\0\1\321\52\0"+
    "\2\121\1\0\56\121\1\0\1\121\1\0\4\121\1\0"+
    "\27\121\51\0\1\322\131\0\1\323\105\0\1\324\4\0"+
    "\1\325\41\0\2\126\1\0\26\126\1\0\6\126\1\0"+
    "\34\126\2\0\22\126\1\127\1\0\26\126\1\0\6\126"+
    "\1\0\34\126\1\22\1\0\21\126\3\0\1\326\2\0"+
    "\1\326\1\0\1\326\3\0\1\326\1\0\1\327\1\0"+
    "\4\326\12\0\1\330\1\331\1\0\1\326\2\0\1\326"+
    "\1\0\26\326\5\0\4\326\3\0\7\326\1\0\75\132"+
    "\1\0\1\332\21\132\2\134\1\0\21\134\1\0\34\134"+
    "\1\0\1\134\1\0\4\134\1\0\27\134\24\0\1\333"+
    "\144\0\1\334\131\0\1\335\105\0\1\336\4\0\1\337"+
    "\41\0\2\142\1\0\34\142\1\0\60\142\34\0\1\340"+
    "\63\0\2\145\1\0\26\145\1\0\2\145\1\0\43\145"+
    "\1\0\4\145\1\0\12\145\36\0\1\341\61\0\2\153"+
    "\1\0\13\153\1\0\13\153\1\0\1\153\1\0\40\153"+
    "\1\0\1\153\1\0\7\153\1\0\11\153\1\154\1\0"+
    "\13\153\1\0\13\153\1\0\1\153\1\0\40\153\1\22"+
    "\1\153\1\0\7\153\1\0\10\153\34\0\1\156\63\0"+
    "\77\161\1\0\20\161\107\163\1\0\10\163\105\164\1\0"+
    "\12\164\105\0\1\342\12\0\2\166\1\0\10\166\1\0"+
    "\1\166\1\0\101\166\75\0\1\343\23\0\2\173\1\0"+
    "\12\173\1\0\10\173\1\0\71\173\74\0\1\344\23\0"+
    "\1\21\2\0\5\21\1\345\1\0\4\21\2\0\4\21"+
    "\20\0\30\21\5\0\4\21\3\0\7\21\1\0\1\200"+
    "\2\0\6\200\1\0\4\200\2\0\4\200\20\0\30\200"+
    "\5\0\4\200\3\0\7\200\1\0\1\200\2\0\1\200"+
    "\2\346\1\200\1\346\1\200\1\0\4\200\2\0\4\200"+
    "\1\347\3\0\1\347\13\0\30\200\5\0\4\200\3\0"+
    "\7\200\1\0\1\200\2\0\1\200\2\204\1\200\1\204"+
    "\1\200\1\0\4\200\2\0\2\200\1\202\1\203\20\0"+
    "\10\200\1\203\10\200\1\202\2\200\1\202\3\200\5\0"+
    "\1\200\1\202\2\200\3\0\7\200\1\0\1\200\2\0"+
    "\1\200\2\205\1\200\1\205\1\200\1\0\4\200\2\0"+
    "\2\200\1\202\1\203\1\0\1\204\16\0\10\200\1\203"+
    "\10\200\1\202\2\200\1\202\3\200\5\0\1\200\1\202"+
    "\2\200\3\0\7\200\1\0\1\200\2\0\1\200\1\205"+
    "\1\206\1\200\1\206\1\200\1\0\4\200\2\0\1\200"+
    "\1\350\1\202\1\203\1\0\1\204\16\0\10\200\1\203"+
    "\1\350\7\200\1\202\2\200\1\202\3\200\5\0\1\200"+
    "\1\202\2\200\3\0\7\200\1\0\1\200\2\0\1\200"+
    "\4\351\1\200\1\0\4\200\2\0\2\200\2\351\20\0"+
    "\2\200\2\351\3\200\2\351\10\200\1\351\2\200\1\351"+
    "\3\200\5\0\3\351\1\200\3\0\7\200\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\3\24"+
    "\1\352\20\0\1\24\1\21\26\24\5\0\4\24\3\0"+
    "\7\24\1\0\13\212\1\213\2\212\1\353\103\212\1\0"+
    "\115\212\17\0\1\354\101\0\1\221\27\0\1\222\43\0"+
    "\1\221\54\0\1\43\1\0\1\32\63\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\2\24\1\355\23\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\6\24\1\356"+
    "\17\24\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\3\24\1\357\3\24\1\360\16\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\5\24\1\361"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\26\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\10\24\1\362\15\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\2\24"+
    "\1\363\7\24\1\364\13\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\20\24\1\365\5\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\15\24\1\366\10\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\3\24\1\367\21\24"+
    "\1\370\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\7\24\1\371\2\24\1\372\13\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\4\24\1\373\21\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\2\24\1\374\23\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\1\375\25\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\1\251\25\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\3\24\1\357"+
    "\22\24\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\3\24\1\376\22\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\7\24\1\377"+
    "\16\24\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\24\24\1\u0100\1\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\10\24\1\u0101"+
    "\15\24\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\22\24\1\u0102\3\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\10\24\1\u0103"+
    "\15\24\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\10\24\1\u0104\15\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\1\u0105\25\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\12\24\1\u0106\13\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\7\24\1\u0107\16\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\4\24\1\241\21\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\5\24\1\253\20\24"+
    "\5\0\4\24\3\0\7\24\5\0\4\u0108\12\0\2\u0108"+
    "\22\0\2\u0108\3\0\2\u0108\10\0\1\u0108\2\0\1\u0108"+
    "\10\0\3\u0108\20\0\4\u0109\12\0\2\u0109\22\0\2\u0109"+
    "\3\0\2\u0109\10\0\1\u0109\2\0\1\u0109\10\0\3\u0109"+
    "\65\0\1\u010a\131\0\1\u010b\122\0\1\u010c\106\0\1\u010d"+
    "\42\0\34\271\1\273\63\271\3\0\1\271\2\0\1\271"+
    "\1\0\1\271\7\0\4\271\10\0\1\273\7\0\1\271"+
    "\1\0\26\271\5\0\4\271\3\0\7\271\55\0\1\u010e"+
    "\1\0\1\u010f\3\0\1\u0110\45\0\1\u0111\36\0\1\u0112"+
    "\3\0\1\u0113\1\0\1\u0114\124\0\1\u0115\45\0\1\u0116"+
    "\40\0\1\u0117\2\0\1\u0118\1\0\1\u0119\122\0\1\u011a"+
    "\1\u011b\4\0\1\u011c\104\0\1\u011d\111\0\1\u011e\6\0"+
    "\1\u011f\4\0\1\u0120\115\0\1\u0121\10\0\1\u0122\1\u0123"+
    "\101\0\1\u0124\1\0\1\u0125\120\0\1\u0126\1\u0127\114\0"+
    "\1\u0128\110\0\1\u0129\127\0\1\u012a\115\0\1\u012b\53\0"+
    "\1\u012c\35\0\1\u012d\3\0\1\u012e\123\0\1\u012f\107\0"+
    "\1\u0130\5\0\1\u0131\114\0\1\u0132\131\0\1\u0133\122\0"+
    "\1\u0134\106\0\1\u0135\113\0\1\u0136\3\0\1\u0137\113\0"+
    "\1\u0138\131\0\1\u0139\122\0\1\u013a\106\0\1\u013b\45\0"+
    "\6\326\3\0\1\326\3\0\6\326\13\0\1\326\2\0"+
    "\1\326\1\0\26\326\5\0\4\326\3\0\7\326\4\0"+
    "\1\u013c\2\0\1\u013c\1\0\1\u013c\3\0\1\u013c\3\0"+
    "\4\u013c\15\0\1\u013c\2\0\1\u013c\1\0\26\u013c\5\0"+
    "\4\u013c\3\0\7\u013c\25\0\1\u013d\53\0\1\u013e\53\0"+
    "\1\u013f\134\0\1\u0140\131\0\1\u0141\122\0\1\u0142\106\0"+
    "\1\u0143\66\0\1\u0144\127\0\1\u0145\63\0\1\21\2\0"+
    "\1\21\4\u0146\1\21\1\0\4\21\2\0\2\21\2\u0146"+
    "\20\0\2\21\2\u0146\3\21\2\u0146\10\21\1\u0146\2\21"+
    "\1\u0146\3\21\5\0\3\u0146\1\21\3\0\7\21\1\0"+
    "\1\200\2\0\1\200\2\346\1\200\1\346\1\200\1\0"+
    "\4\200\2\0\2\200\1\202\1\200\20\0\21\200\1\202"+
    "\2\200\1\202\3\200\5\0\1\200\1\202\2\200\3\0"+
    "\7\200\5\0\2\346\1\0\1\346\110\0\1\200\2\0"+
    "\1\200\4\351\1\200\1\0\4\200\2\0\1\200\1\350"+
    "\2\351\20\0\2\200\2\351\3\200\2\351\1\350\7\200"+
    "\1\351\2\200\1\351\3\200\5\0\3\351\1\200\3\0"+
    "\7\200\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\26\24\5\0"+
    "\4\24\3\0\2\24\1\u0147\4\24\45\0\1\353\11\0"+
    "\2\353\56\0\1\u0148\101\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\6\24\1\u0149\17\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\1\u014a\25\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\u014b\1\21\26\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\6\24\1\u014c\17\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\6\24\1\u014d\17\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\2\24\1\241\23\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\3\24\1\u014e\22\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\5\24"+
    "\1\u014f\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\26\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\6\24\1\210\17\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\2\24\1\u0150\3\24\1\u0151\1\u0152\1\24\1\u0150\14\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\5\24"+
    "\1\u0153\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\26\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\5\24\1\u0154\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\26\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\7\24"+
    "\1\u0155\16\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\3\24\1\u0156\22\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\14\24"+
    "\1\u0157\11\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\6\24\1\241\17\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\17\24"+
    "\1\u0158\6\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\14\24\1\241\11\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\7\24"+
    "\1\241\16\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\3\24\1\210\22\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\7\24"+
    "\1\374\16\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\10\24\1\u0159\15\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\4\24"+
    "\1\u015a\21\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\12\24\1\u0100\13\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\7\24"+
    "\1\u015b\16\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\5\24\1\u015c\20\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\2\24"+
    "\1\361\23\24\5\0\4\24\3\0\7\24\5\0\4\u015d"+
    "\12\0\2\u015d\22\0\2\u015d\3\0\2\u015d\10\0\1\u015d"+
    "\2\0\1\u015d\10\0\3\u015d\20\0\4\u015e\12\0\2\u015e"+
    "\22\0\2\u015e\3\0\2\u015e\10\0\1\u015e\2\0\1\u015e"+
    "\10\0\3\u015e\102\0\1\u015f\56\0\1\u0160\133\0\1\u0161"+
    "\132\0\1\u010c\107\0\1\u0162\4\0\1\u0163\140\0\1\u0164"+
    "\112\0\1\u0165\103\0\1\u0166\5\0\1\u0167\110\0\1\u0168"+
    "\122\0\1\u0169\122\0\1\u016a\113\0\1\u016b\111\0\1\u016c"+
    "\121\0\1\u016d\125\0\1\u016e\123\0\1\u016f\111\0\1\u0170"+
    "\3\0\1\u0171\126\0\1\u0172\120\0\1\u0173\77\0\1\u0174"+
    "\2\0\1\u0175\21\0\1\u0176\101\0\1\u0177\110\0\1\u0178"+
    "\131\0\1\u0179\5\0\1\u017a\41\0\1\u017b\163\0\1\u017c"+
    "\111\0\1\u017d\2\0\1\u017e\14\0\1\u017f\111\0\1\u0180"+
    "\112\0\1\u0181\4\0\1\u0182\117\0\1\u0183\107\0\1\u0184"+
    "\7\0\1\u0185\121\0\1\u0186\101\0\1\u0187\133\0\1\u0188"+
    "\107\0\1\u0189\15\0\1\u018a\1\0\1\u018b\76\0\1\u018c"+
    "\122\0\1\u018d\123\0\1\u018e\3\0\1\u018f\107\0\1\u0190"+
    "\2\0\1\u0118\114\0\1\u0191\117\0\1\u0192\133\0\1\u0193"+
    "\56\0\1\u0194\133\0\1\u0195\132\0\1\u0134\53\0\1\u0196"+
    "\165\0\1\u0197\127\0\1\u0198\56\0\1\u0199\133\0\1\u019a"+
    "\132\0\1\u013a\46\0\6\u013c\3\0\1\u013c\3\0\6\u013c"+
    "\13\0\1\u013c\2\0\1\u013c\1\0\26\u013c\5\0\4\u013c"+
    "\3\0\7\u013c\25\0\1\u019b\174\0\1\u019c\104\0\1\u019d"+
    "\56\0\1\u019e\133\0\1\u019f\132\0\1\u0142\67\0\1\u01a0"+
    "\73\0\1\21\2\0\1\21\4\u01a1\1\21\1\0\4\21"+
    "\2\0\2\21\2\u01a1\20\0\2\21\2\u01a1\3\21\2\u01a1"+
    "\10\21\1\u01a1\2\21\1\u01a1\3\21\5\0\3\u01a1\1\21"+
    "\3\0\7\21\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\26\24"+
    "\5\0\4\24\3\0\3\24\1\u01a2\3\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\4\24\1\u0100\21\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\16\24"+
    "\1\241\7\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\6\24\1\u01a3\17\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\5\24"+
    "\1\u0100\20\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\4\24\1\u01a4\21\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\u01a5\1\21\26\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\6\24\1\u0100\17\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\25\24\1\u01a6\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\6\24\1\u01a7\17\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\4\24\1\u01a8\21\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\10\24\1\u01a9\15\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\6\24\1\u01aa\17\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\10\24\1\u01ab\15\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\4\24\1\210\21\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\7\24\1\365\16\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\2\24\1\210\23\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\7\24\1\210\16\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\3\24\1\u01ac\22\24\5\0"+
    "\4\24\3\0\7\24\42\0\1\u0161\6\0\1\u010c\52\0"+
    "\6\u0160\1\0\1\u01ad\1\0\1\u01ad\2\u0160\1\u01ad\4\u0160"+
    "\2\u01ad\1\0\2\u01ad\1\0\1\u01ad\2\0\6\u01ad\1\0"+
    "\1\u0160\1\u01ad\26\u0160\2\0\1\u01ad\1\0\1\u01ad\4\u0160"+
    "\3\u01ad\7\u0160\17\0\1\u01ae\150\0\1\u01af\131\0\1\u01b0"+
    "\112\0\1\u0171\1\0\1\u01b1\51\0\1\u01b2\170\0\1\u01b3"+
    "\102\0\1\u01b4\124\0\1\u01b5\122\0\1\u01b6\111\0\1\u0171"+
    "\123\0\1\u0170\111\0\1\u01b7\124\0\1\u01b8\121\0\1\u0118"+
    "\126\0\1\u01b9\105\0\1\u016e\131\0\1\u016e\111\0\1\u01ba"+
    "\130\0\1\u01bb\42\0\1\u01bc\117\0\1\u01bd\164\0\1\u01be"+
    "\112\0\1\u01bf\117\0\1\u01c0\136\0\1\u01c1\74\0\1\u016e"+
    "\133\0\1\u01c2\103\0\1\u01c3\127\0\1\u01c4\125\0\1\u01c5"+
    "\122\0\1\u0171\106\0\1\u01c6\127\0\1\u016e\115\0\1\u01c7"+
    "\106\0\1\u01c8\122\0\1\u01c9\112\0\1\u01ca\124\0\1\u01cb"+
    "\130\0\1\u016e\105\0\1\u016e\116\0\1\u01cc\113\0\1\u01cd"+
    "\126\0\1\u01b8\110\0\1\u017b\142\0\1\u01ce\77\0\1\u01cf"+
    "\14\0\1\u01d0\105\0\1\u0171\121\0\1\u01d1\111\0\1\u01d2"+
    "\110\0\1\u0195\6\0\1\u0134\52\0\6\u0194\1\0\1\u01d3"+
    "\1\0\1\u01d3\2\u0194\1\u01d3\4\u0194\2\u01d3\1\0\2\u01d3"+
    "\1\0\1\u01d3\2\0\6\u01d3\1\0\1\u0194\1\u01d3\26\u0194"+
    "\2\0\1\u01d3\1\0\1\u01d3\4\u0194\3\u01d3\7\u0194\17\0"+
    "\1\u01d4\152\0\1\u01d5\126\0\1\u01d6\100\0\1\u019a\6\0"+
    "\1\u013a\52\0\6\u0199\1\0\1\u01d7\1\0\1\u01d7\2\u0199"+
    "\1\u01d7\4\u0199\2\u01d7\1\0\2\u01d7\1\0\1\u01d7\2\0"+
    "\6\u01d7\1\0\1\u0199\1\u01d7\26\u0199\2\0\1\u01d7\1\0"+
    "\1\u01d7\4\u0199\3\u01d7\7\u0199\17\0\1\u01d8\203\0\1\u01d9"+
    "\56\0\1\u019f\6\0\1\u0142\52\0\6\u019e\1\0\1\u01da"+
    "\1\0\1\u01da\2\u019e\1\u01da\4\u019e\2\u01da\1\0\2\u01da"+
    "\1\0\1\u01da\2\0\6\u01da\1\0\1\u019e\1\u01da\26\u019e"+
    "\2\0\1\u01da\1\0\1\u01da\4\u019e\3\u01da\7\u019e\17\0"+
    "\1\u01db\101\0\1\21\2\0\1\21\4\u01dc\1\21\1\0"+
    "\4\21\2\0\2\21\2\u01dc\20\0\2\21\2\u01dc\3\21"+
    "\2\u01dc\10\21\1\u01dc\2\21\1\u01dc\3\21\5\0\3\u01dc"+
    "\1\21\3\0\7\21\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\26\24\5\0\4\24\3\0\4\24\1\u01dd\2\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\3\24\1\u01de\22\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\6\24\1\0"+
    "\1\21\1\177\2\24\2\0\4\24\20\0\1\24\1\21"+
    "\10\24\1\u01df\15\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\1\24\1\u01e0\24\24\5\0"+
    "\4\24\3\0\7\24\1\0\1\21\2\0\5\24\1\u01e1"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\26\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\12\24\1\210\13\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\12\24"+
    "\1\u01e2\13\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\4\24\1\365\21\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\5\24"+
    "\1\u01e3\20\24\5\0\4\24\3\0\7\24\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\12\24\1\u01e4\13\24\5\0\4\24"+
    "\3\0\7\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\10\24"+
    "\1\u01e5\15\24\5\0\4\24\3\0\7\24\17\0\1\u0160"+
    "\155\0\1\u01e6\125\0\1\u0188\115\0\1\u016e\114\0\1\u0118"+
    "\124\0\1\u01c9\111\0\1\u01e7\115\0\1\u01e8\115\0\1\u0171"+
    "\115\0\1\u01e9\127\0\1\u0189\124\0\1\u0171\121\0\1\u01ea"+
    "\114\0\1\u01eb\107\0\1\u01ec\123\0\1\u01ed\110\0\1\u01ee"+
    "\120\0\1\u01ef\120\0\1\u01f0\120\0\1\u01f1\116\0\1\u016e"+
    "\134\0\1\u01b2\103\0\1\u01f2\117\0\1\u01f3\125\0\1\u01f4"+
    "\111\0\1\u0118\113\0\1\u0119\123\0\1\u016e\113\0\1\u01f5"+
    "\121\0\1\u01f6\123\0\1\u01f7\53\0\1\u01f8\155\0\1\u01f9"+
    "\125\0\1\u01fa\117\0\1\u01fb\111\0\1\u01fc\127\0\1\u01fd"+
    "\57\0\1\u0194\163\0\1\u01fe\121\0\1\u01ff\51\0\1\u0199"+
    "\204\0\1\u0200\32\0\1\u019e\101\0\1\21\2\0\1\21"+
    "\4\24\1\21\1\0\4\21\2\0\2\21\2\24\20\0"+
    "\2\21\2\24\3\21\2\24\10\21\1\24\2\21\1\24"+
    "\3\21\5\0\3\24\1\21\3\0\7\21\1\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\26\24\5\0\4\24\3\0\5\24"+
    "\1\u0201\1\24\1\0\1\21\2\0\6\24\1\0\1\21"+
    "\1\177\2\24\2\0\4\24\20\0\1\24\1\21\1\u0202"+
    "\25\24\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\12\24\1\u0203\13\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\6\24\1\u0157"+
    "\17\24\5\0\4\24\3\0\7\24\1\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\1\u015b\25\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\3\24\1\u0204\22\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\5\24"+
    "\1\374\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\26\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\14\24\1\u0205\11\24\5\0"+
    "\4\24\3\0\7\24\53\0\1\u0206\125\0\1\u01f3\105\0"+
    "\1\u0207\123\0\1\u0208\121\0\1\u0209\123\0\1\u020a\117\0"+
    "\1\u020b\111\0\1\u0190\113\0\1\u020c\136\0\1\u020d\100\0"+
    "\1\u017c\3\0\1\u020e\123\0\1\u020f\121\0\1\u01ca\110\0"+
    "\1\u0171\116\0\1\u0118\124\0\1\u016e\130\0\1\u0210\104\0"+
    "\1\u0211\121\0\1\u01c2\113\0\1\u0118\121\0\1\u0212\116\0"+
    "\1\u0213\116\0\1\u01d2\130\0\1\u01b1\107\0\1\u0214\45\0"+
    "\26\u01ff\1\u016e\71\u01ff\104\0\1\u0215\13\0\1\21\2\0"+
    "\6\24\1\0\1\21\1\177\2\24\2\0\4\24\20\0"+
    "\1\24\1\21\26\24\5\0\4\24\3\0\6\24\1\210"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\3\24\1\u0216\22\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\11\24\1\210\14\24\5\0\4\24\3\0\7\24"+
    "\1\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\11\24\1\u0217\14\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\12\24\1\241\13\24\5\0\4\24\3\0\7\24"+
    "\63\0\1\u0209\110\0\1\u01c2\133\0\1\u016e\120\0\1\u016e"+
    "\104\0\1\u0208\115\0\1\u0182\120\0\1\u0218\53\0\1\u0219"+
    "\166\0\1\u021a\106\0\1\u016f\117\0\1\u0212\122\0\1\u021b"+
    "\117\0\1\u0208\124\0\1\u021c\144\0\1\u021d\14\0\1\21"+
    "\2\0\6\24\1\0\1\21\1\177\2\24\2\0\4\24"+
    "\20\0\1\24\1\21\1\u021e\25\24\5\0\4\24\3\0"+
    "\7\24\1\0\1\21\2\0\6\24\1\0\1\21\1\177"+
    "\2\24\2\0\4\24\20\0\1\24\1\21\1\u021f\25\24"+
    "\5\0\4\24\3\0\7\24\51\0\1\u0189\122\0\1\u0220"+
    "\125\0\1\u01c2\112\0\1\u0188\111\0\1\u0221\151\0\1\u0222"+
    "\17\0\1\21\2\0\6\24\1\0\1\21\1\177\2\24"+
    "\2\0\4\24\20\0\1\24\1\21\1\24\1\u0159\24\24"+
    "\5\0\4\24\3\0\7\24\1\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\4\24\1\u0223\21\24\5\0\4\24\3\0\7\24"+
    "\52\0\1\u0224\123\0\1\u01ff\42\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\1\24\1\u0225\24\24\5\0\4\24\3\0\7\24"+
    "\51\0\1\u016e\11\0\1\u01c9\35\0\1\21\2\0\6\24"+
    "\1\0\1\21\1\177\2\24\2\0\4\24\20\0\1\24"+
    "\1\21\1\u0226\25\24\5\0\4\24\3\0\7\24\1\0"+
    "\1\21\2\0\6\24\1\0\1\21\1\177\2\24\2\0"+
    "\4\24\20\0\1\24\1\21\11\24\1\365\14\24\5\0"+
    "\4\24\3\0\7\24\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\2\1\3\0\2\1\1\11\3\1\1\11\5\1"+
    "\2\11\4\1\1\11\23\1\3\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\5\1"+
    "\1\11\10\1\1\11\5\1\1\11\2\1\1\11\1\1"+
    "\1\11\5\1\1\11\2\1\1\11\1\1\3\11\3\1"+
    "\3\11\1\1\1\11\4\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\13\1\2\0\1\11\3\1\2\0"+
    "\1\11\35\1\1\11\2\1\1\11\4\0\1\11\2\0"+
    "\1\11\32\0\3\1\2\11\5\0\1\11\2\0\2\11"+
    "\2\1\1\0\40\1\64\0\1\1\2\0\1\11\5\0"+
    "\1\11\2\1\1\11\24\1\1\0\1\11\1\0\1\1"+
    "\15\0\1\11\45\0\1\1\4\0\1\1\1\0\1\11"+
    "\2\0\1\1\1\0\1\11\14\1\15\0\1\1\20\0"+
    "\1\1\20\0\12\1\33\0\6\1\4\0\1\1\12\0"+
    "\2\1\6\0\2\1\2\0\1\11\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[550];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
	 * Token type specifying we're in a JavaScript multiline comment.
	 */
	private static final int INTERNAL_IN_JS_MLC				= -8;

	/**
	 * Token type specifying we're in a JavaScript documentation comment.
	 */
	private static final int INTERNAL_IN_JS_COMMENT_DOCUMENTATION = -9;
	
	/**
	 * Token type specifying we're in an invalid multi-line JS string.
	 */
	private static final int INTERNAL_IN_JS_STRING_INVALID	= -10;

	/**
	 * Token type specifying we're in a valid multi-line JS string.
	 */
	private static final int INTERNAL_IN_JS_STRING_VALID		= -11;

	/**
	 * Token type specifying we're in an invalid multi-line JS single-quoted string.
	 */
	private static final int INTERNAL_IN_JS_CHAR_INVALID	= -12;

	/**
	 * Token type specifying we're in a valid multi-line JS single-quoted string.
	 */
	private static final int INTERNAL_IN_JS_CHAR_VALID		= -13;

	private static final int INTERNAL_E4X = -14;

	private static final int INTERNAL_E4X_INTAG = -15;

	private static final int INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION = -16;

	private static final int INTERNAL_IN_E4X_COMMENT = -17;

	private static final int INTERNAL_E4X_DTD = -18;

	private static final int INTERNAL_E4X_DTD_INTERNAL = -19;

	private static final int INTERNAL_E4X_ATTR_SINGLE = -20;

	private static final int INTERNAL_E4X_ATTR_DOUBLE = -21;

	private static final int INTERNAL_E4X_MARKUP_CDATA = -22;

	/**
	 * Token type specifying we're in a valid multi-line template literal.
	 */
	private static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID = -23;

	/**
	 * Token type specifying we're in an invalid multi-line template literal.
	 */
	private static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID = -24;

	/**
	 * When in the JS_STRING state, whether the current string is valid.
	 */
	private boolean validJSString;

	/**
	 * Whether we're in an internal DTD.  Only valid if in an e4x DTD.
	 */
	private boolean e4x_inInternalDtd;

	/**
	 * The previous e4x state.  Only valid if in an e4x state.
	 */
	private int e4x_prevState;

	/**
	 * The version of JavaScript being highlighted.
	 */
	private static String jsVersion;

	/**
	 * Whether e4x is being highlighted.
	 */
	private static boolean e4xSupported;

	/**
	 * Language state set on JS tokens.  Must be 0.
	 */
	private static final int LANG_INDEX_DEFAULT	= 0;

	/**
	 * Language state set on E4X tokens.
	 */
	private static final int LANG_INDEX_E4X = 1;

	private Stack<Boolean> varDepths;

	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public TokenMakerJavaScriptFMCS() {
		super();
	}


	static {
		jsVersion = "1.7"; // Many folks using JS tend to be bleeding edge
		e4xSupported = true;
	}


	/**
	 * Adds the token specified to the current linked list of tokens as an
	 * "end token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType The token's type.
	 */
	private void addEndToken(int tokenType) {
		addToken(zzMarkedPos,zzMarkedPos, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the closest {@link TokenTypes} "standard" token type for a given
	 * "internal" token type (e.g. one whose value is <code>&lt; 0</code>).
	 */
	 @Override
	public int getClosestStandardTokenTypeForInternalType(int type) {
		switch (type) {
			case INTERNAL_IN_JS_MLC:
				return TokenTypes.COMMENT_MULTILINE;
			case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
				return TokenTypes.COMMENT_DOCUMENTATION;
			case INTERNAL_IN_JS_STRING_INVALID:
			case INTERNAL_IN_JS_STRING_VALID:
			case INTERNAL_IN_JS_CHAR_INVALID:
			case INTERNAL_IN_JS_CHAR_VALID:
				return TokenTypes.LITERAL_STRING_DOUBLE_QUOTE;
			case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
				return TokenTypes.LITERAL_BACKQUOTE;
			case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
				return TokenTypes.ERROR_STRING_DOUBLE;
		}
		return type;
	}


	/**
	 * Returns the JavaScript version being highlighted.
	 *
	 * @return Supported JavaScript version.
	 * @see #isJavaScriptCompatible(String)
	 */
	public static String getJavaScriptVersion() {
		return jsVersion;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;
		validJSString = true;
		e4x_prevState = YYINITIAL;
		e4x_inInternalDtd = false;
		int languageIndex = LANG_INDEX_DEFAULT;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			case INTERNAL_IN_JS_MLC:
				state = JS_MLC;
				break;
			case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
				state = JS_DOCCOMMENT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_STRING_INVALID:
				state = JS_STRING;
				validJSString = false;
				break;
			case INTERNAL_IN_JS_STRING_VALID:
				state = JS_STRING;
				break;
			case INTERNAL_IN_JS_CHAR_INVALID:
				state = JS_CHAR;
				validJSString = false;
				break;
			case INTERNAL_IN_JS_CHAR_VALID:
				state = JS_CHAR;
				break;
			case INTERNAL_E4X:
				state = E4X;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_INTAG:
				state = E4X_INTAG;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION:
				state = E4X_PI;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_DTD:
				state = E4X_DTD;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_DTD_INTERNAL:
				state = E4X_DTD;
				e4x_inInternalDtd = true;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_ATTR_SINGLE:
				state = E4X_INATTR_SINGLE;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_ATTR_DOUBLE:
				state = E4X_INATTR_DOUBLE;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_MARKUP_CDATA:
				state = E4X_CDATA;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
				state = JS_TEMPLATE_LITERAL;
				validJSString = true;
				break;
			case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
				state = JS_TEMPLATE_LITERAL;
				validJSString = false;
				break;
			default:
				if (initialTokenType<-1024) { // INTERNAL_IN_E4X_COMMENT - prevState
					int main = -(-initialTokenType & 0xffffff00);
					switch (main) {
						default: // Should never happen
						case INTERNAL_IN_E4X_COMMENT:
							state = E4X_COMMENT;
							break;
					}
					e4x_prevState = -initialTokenType&0xff;
					languageIndex = LANG_INDEX_E4X;
				}
				else { // Shouldn't happen
					state = Token.NULL;
				}
		}

		setLanguageIndex(languageIndex);
		start = text.offset;
		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Returns whether e4x is being highlighted.
	 *
	 * @return Whether e4x is being highlighted.
	 * @see #setE4xSupported(boolean)
	 */
	public static boolean isE4xSupported() {
		return e4xSupported;
	}


	/**
	 * Returns whether features for a specific JS version should be honored
	 * while highlighting.
	 * 
	 * @param version JavaScript version required 
	 * @return Whether the JavaScript version is the same or greater than
	 *         version required. 
	 */
	public static boolean isJavaScriptCompatible(String version) {
		return jsVersion.compareTo(version) >= 0;
	}


	/**
	 * Sets whether e4x should be highlighted.  A repaint should be forced on
	 * all <code>RSyntaxTextArea</code>s editing JavaScript if this property
	 * is changed to see the difference.
	 *
	 * @param supported Whether e4x should be highlighted.
	 * @see #isE4xSupported()
	 */
	public static void setE4xSupported(boolean supported) {
		e4xSupported = supported;
	}


	/**
	 * Set the supported JavaScript version because some keywords were
	 * introduced on or after this version.
	 *
	 * @param javaScriptVersion The version of JavaScript to support, such as
	 *        "<code>1.5</code>" or "<code>1.6</code>".
	 * @see #isJavaScriptCompatible(String)
	 * @see #getJavaScriptVersion()
	 */
	public static void setJavaScriptVersion(String javaScriptVersion) {
		jsVersion = javaScriptVersion;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TokenMakerJavaScriptFMCS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TokenMakerJavaScriptFMCS(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { start = zzMarkedPos-1; yybegin(E4X_INATTR_SINGLE);
          }
        case 79: break;
        case 34: 
          { start = zzMarkedPos-1; yybegin(E4X_INATTR_DOUBLE);
          }
        case 80: break;
        case 43: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 81: break;
        case 77: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 82: break;
        case 27: 
          { addToken(start,zzStartRead-1, Token.MARKUP_DTD); addEndToken(e4x_inInternalDtd ? INTERNAL_E4X_DTD_INTERNAL : INTERNAL_E4X_DTD); return firstToken;
          }
        case 83: break;
        case 40: 
          { int type = validJSString ? Token.LITERAL_BACKQUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 84: break;
        case 16: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_INVALID);
								}
								return firstToken;
          }
        case 85: break;
        case 3: 
          { addToken(Token.WHITESPACE);
          }
        case 86: break;
        case 18: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
          }
        case 87: break;
        case 49: 
          { int start = zzStartRead;
										int operatorLen = yycharat(0)=='+' ? 2 : 1;
										int yylen = yylength(); // Cache before first addToken() invalidates it
										//System.out.println("'" + yytext() + "': " + yylength() + ", " + (operatorLen+1));
										addToken(zzStartRead,zzStartRead+operatorLen-1, Token.OPERATOR);
										if (yylen>operatorLen+1) {
											//System.out.println((start+operatorLen) + ", " + (zzMarkedPos-2));
											addToken(start+operatorLen,zzMarkedPos-2, Token.WHITESPACE);
										}
										zzStartRead = zzCurrentPos = zzMarkedPos = zzMarkedPos - 1;
										if (isE4xSupported()) {
											// Scanning will continue with "<" as markup tag start
											yybegin(E4X, LANG_INDEX_E4X);
										}
										// Found e4x (or syntax error) but option not enabled;
										// Scanning will continue at "<" as operator
          }
        case 88: break;
        case 46: 
          { addToken(Token.FUNCTION);
          }
        case 89: break;
        case 56: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 90: break;
        case 61: 
          { addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
								start = zzMarkedPos-2;
								if (varDepths==null) {
									varDepths = new Stack<Boolean>();
								}
								else {
									varDepths.clear();
								}
								varDepths.push(Boolean.TRUE);
								yybegin(JS_TEMPLATE_LITERAL_EXPR);
          }
        case 91: break;
        case 42: 
          { if (!varDepths.empty()) {
								varDepths.pop();
								if (varDepths.empty()) {
									addToken(start,zzStartRead, Token.VARIABLE);
									start = zzMarkedPos;
									yybegin(JS_TEMPLATE_LITERAL);
								}
							}
          }
        case 92: break;
        case 37: 
          { if (validJSString) {
									addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead - 1, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
          }
        case 93: break;
        case 39: 
          { /* Skip valid '$' that is not part of template literal expression start */
          }
        case 94: break;
        case 11: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_TEMPLATE_LITERAL);
          }
        case 95: break;
        case 51: 
          { /* Skip all escaped chars. */
          }
        case 96: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 97: break;
        case 74: 
          { start = zzStartRead; e4x_prevState = zzLexicalState; yybegin(E4X_COMMENT);
          }
        case 98: break;
        case 67: 
          { int temp=zzStartRead; yybegin(E4X); addToken(start,zzStartRead-1, Token.MARKUP_CDATA); addToken(temp,zzMarkedPos-1, Token.MARKUP_CDATA_DELIMITER);
          }
        case 99: break;
        case 62: 
          { varDepths.push(Boolean.TRUE);
          }
        case 100: break;
        case 65: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead+1, Token.MARKUP_TAG_DELIMITER);
									addToken(zzMarkedPos-(count-2), zzMarkedPos-1, Token.MARKUP_TAG_NAME);
									yybegin(E4X_INTAG);
          }
        case 101: break;
        case 53: 
          { /* Invalid latin-1 character \xXX */ validJSString = false;
          }
        case 102: break;
        case 68: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 103: break;
        case 59: 
          { start = zzMarkedPos-2; yybegin(E4X_PI);
          }
        case 104: break;
        case 36: 
          { yybegin(E4X_INTAG); addToken(start,zzStartRead, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
          }
        case 105: break;
        case 14: 
          { int type = validJSString ? Token.LITERAL_STRING_DOUBLE_QUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 106: break;
        case 20: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 107: break;
        case 24: 
          { yybegin(YYINITIAL, LANG_INDEX_DEFAULT); addToken(Token.IDENTIFIER);
          }
        case 108: break;
        case 52: 
          { /* Invalid Unicode character \\uXXXX */ validJSString = false;
          }
        case 109: break;
        case 76: 
          { int temp = zzStartRead; addToken(start,zzStartRead-1, Token.MARKUP_DTD); start = temp; e4x_prevState = zzLexicalState; yybegin(E4X_COMMENT);
          }
        case 110: break;
        case 66: 
          { int temp = zzMarkedPos; addToken(start,zzStartRead+2, Token.MARKUP_COMMENT); start = temp; yybegin(e4x_prevState);
          }
        case 111: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 112: break;
        case 60: 
          { yybegin(E4X); addToken(start,zzStartRead+1, Token.MARKUP_PROCESSING_INSTRUCTION);
          }
        case 113: break;
        case 55: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 114: break;
        case 19: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
          }
        case 115: break;
        case 26: 
          { addToken(start,zzStartRead-1, Token.MARKUP_PROCESSING_INSTRUCTION); addEndToken(INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION); return firstToken;
          }
        case 116: break;
        case 5: 
          { addToken(Token.IDENTIFIER);
          }
        case 117: break;
        case 70: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 118: break;
        case 73: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 119: break;
        case 64: 
          { start = zzMarkedPos-3; yybegin(JS_DOCCOMMENT);
          }
        case 120: break;
        case 9: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_STRING);
          }
        case 121: break;
        case 58: 
          { start = zzMarkedPos-2; e4x_inInternalDtd = false; yybegin(E4X_DTD);
          }
        case 122: break;
        case 38: 
          { if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
          }
        case 123: break;
        case 25: 
          { addToken(start,zzStartRead-1, Token.MARKUP_COMMENT); addEndToken(INTERNAL_IN_E4X_COMMENT - e4x_prevState); return firstToken;
          }
        case 124: break;
        case 10: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_CHAR);
          }
        case 125: break;
        case 29: 
          { e4x_inInternalDtd = true;
          }
        case 126: break;
        case 72: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 127: break;
        case 48: 
          { start = zzMarkedPos-2; yybegin(JS_MLC);
          }
        case 128: break;
        case 45: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 129: break;
        case 78: 
          { addToken(Token.MARKUP_CDATA_DELIMITER); start = zzMarkedPos; yybegin(E4X_CDATA);
          }
        case 130: break;
        case 32: 
          { addToken(Token.MARKUP_TAG_DELIMITER); /* Not valid but we'll still accept it */
          }
        case 131: break;
        case 2: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 132: break;
        case 75: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.MARKUP_COMMENT); addHyperlinkToken(temp,zzMarkedPos-1, Token.MARKUP_COMMENT); start = zzMarkedPos;
          }
        case 133: break;
        case 33: 
          { yybegin(E4X); addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 134: break;
        case 23: 
          { addToken(Token.MARKUP_ENTITY_REFERENCE);
          }
        case 135: break;
        case 69: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 136: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 137: break;
        case 50: 
          { addToken(Token.RESERVED_WORD);
          }
        case 138: break;
        case 54: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 139: break;
        case 22: 
          { addToken(Token.MARKUP_TAG_DELIMITER); yybegin(E4X_INTAG);
          }
        case 140: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 141: break;
        case 31: 
          { addToken(Token.MARKUP_TAG_ATTRIBUTE);
          }
        case 142: break;
        case 71: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 143: break;
        case 17: 
          { int type = validJSString ? Token.LITERAL_CHAR : Token.ERROR_CHAR; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 144: break;
        case 47: 
          { start = zzMarkedPos-2; yybegin(JS_EOL_COMMENT);
          }
        case 145: break;
        case 21: 
          { addEndToken(INTERNAL_E4X); return firstToken;
          }
        case 146: break;
        case 13: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
									addEndToken(INTERNAL_IN_JS_STRING_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_STRING_INVALID);
								}
								return firstToken;
          }
        case 147: break;
        case 44: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 148: break;
        case 57: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead, Token.MARKUP_TAG_DELIMITER);
									addToken(zzMarkedPos-(count-1), zzMarkedPos-1, Token.MARKUP_TAG_NAME);
									yybegin(E4X_INTAG);
          }
        case 149: break;
        case 63: 
          { boolean highlightedAsRegex = false;
										if (firstToken==null) {
											addToken(Token.REGEX);
											highlightedAsRegex = true;
										}
										else {
											// If this is *likely* to be a regex, based on
											// the previous token, highlight it as such.
											Token t = firstToken.getLastNonCommentNonWhitespaceToken();
											if (RSyntaxUtilities.regexCanFollowInJavaScript(t)) {
												addToken(Token.REGEX);
												highlightedAsRegex = true;
											}
										}
										// If it doesn't *appear* to be a regex, highlight it as
										// individual tokens.
										if (!highlightedAsRegex) {
											int temp = zzStartRead + 1;
											addToken(zzStartRead, zzStartRead, Token.OPERATOR);
											zzStartRead = zzCurrentPos = zzMarkedPos = temp;
										}
          }
        case 150: break;
        case 28: 
          { if (!e4x_inInternalDtd) { yybegin(E4X); addToken(start,zzStartRead, Token.MARKUP_DTD); }
          }
        case 151: break;
        case 6: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 152: break;
        case 30: 
          { e4x_inInternalDtd = false;
          }
        case 153: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 154: break;
        case 41: 
          { // TODO: This isn't right.  The expression and its depth should continue to the next line.
							addToken(start,zzStartRead-1, Token.VARIABLE); addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID); return firstToken;
          }
        case 155: break;
        case 1: 
          { 
          }
        case 156: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case JS_STRING: {
              addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
            case 551: break;
            case E4X: {
              addEndToken(INTERNAL_E4X); return firstToken;
            }
            case 552: break;
            case E4X_INTAG: {
              addToken(start,zzStartRead-1, INTERNAL_E4X_INTAG); return firstToken;
            }
            case 553: break;
            case E4X_PI: {
              addToken(start,zzStartRead-1, Token.MARKUP_PROCESSING_INSTRUCTION); addEndToken(INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION); return firstToken;
            }
            case 554: break;
            case JS_MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
            }
            case 555: break;
            case JS_CHAR: {
              addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
            case 556: break;
            case JS_EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 557: break;
            case E4X_COMMENT: {
              addToken(start,zzStartRead-1, Token.MARKUP_COMMENT); addEndToken(INTERNAL_IN_E4X_COMMENT - e4x_prevState); return firstToken;
            }
            case 558: break;
            case JS_DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
            }
            case 559: break;
            case E4X_DTD: {
              addToken(start,zzStartRead-1, Token.MARKUP_DTD); addEndToken(e4x_inInternalDtd ? INTERNAL_E4X_DTD_INTERNAL : INTERNAL_E4X_DTD); return firstToken;
            }
            case 560: break;
            case JS_TEMPLATE_LITERAL: {
              if (validJSString) {
									addToken(start, zzStartRead - 1, Token.LITERAL_BACKQUOTE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
								}
								else {
									addToken(start,zzStartRead - 1, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
								}
								return firstToken;
            }
            case 561: break;
            case E4X_INATTR_SINGLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_E4X_ATTR_SINGLE); return firstToken;
            }
            case 562: break;
            case E4X_INATTR_DOUBLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_E4X_ATTR_DOUBLE); return firstToken;
            }
            case 563: break;
            case JS_TEMPLATE_LITERAL_EXPR: {
              // TODO: This isn't right.  The expression and its depth should continue to the next line.
							addToken(start,zzStartRead-1, Token.VARIABLE); addEndToken(INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID); return firstToken;
            }
            case 564: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 565: break;
            case E4X_CDATA: {
              addToken(start,zzStartRead-1, Token.MARKUP_CDATA); addEndToken(INTERNAL_E4X_MARKUP_CDATA); return firstToken;
            }
            case 566: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
